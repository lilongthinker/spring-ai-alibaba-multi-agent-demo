openapi: 3.0.3
info:
  title: 云边奶茶铺订单管理API
  description: |
    云边奶茶铺订单管理相关接口文档，提供订单创建、查询、更新、删除等功能。
    
    ## 接口说明
    本API文档只包含与MCP Tools对应的接口，用于AI Agent调用。
    
    ## 对应Tools的接口 (11个)
    1. POST /api/orders - 对应 order-create-order, order-create-order-with-user
    2. GET /api/orders/{userId}/{orderId} - 对应 order-get-order-by-user
    3. GET /api/orders/user/{userId} - 对应 order-get-orders-by-user
    4. POST /api/orders/query - 对应 order-query-orders
    5. DELETE /api/orders/{userId}/{orderId} - 对应 order-delete-order
    6. PUT /api/orders/{userId}/{orderId}/remark - 对应 order-update-remark
    7. GET /api/orders - 对应 order-get-orders
    8. GET /api/orders/{orderId} - 对应 order-get-order
    9. GET /api/orders/stock/{productName} - 对应 order-check-stock
    10. GET /api/orders/products/{productName}/validate - 对应 order-validate-product
  version: 1.0.0
  contact:
    name: 云边奶茶铺开发团队
    email: dev@yunbian-tea.com
    url: https://www.yunbian-tea.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:10002
    description: 本地开发环境
  - url: https://api.yunbian-tea.com
    description: 生产环境

paths:
  /api/orders:
    post:
      summary: 创建订单
      description: |
        创建新的奶茶订单。支持云边奶茶铺的所有产品，包括云边茉莉、桂花云露、云雾观音等经典产品。
        系统会自动检查库存并计算价格。
        
        **对应Tools**: order-create-order, order-create-order-with-user
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
            example:
              userId: 12345678901
              productName: "云边茉莉"
              sweetness: 5
              iceLevel: 5
              quantity: 1
              remark: "请尽快制作"
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: 创建失败
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: "产品不存在或库存不足"

    get:
      summary: 获取所有订单
      description: |
        获取系统中所有订单的列表，包括订单ID、产品信息、价格和创建时间。
        用于查看订单历史和统计信息。
        
        **对应Tools**: order-get-orders
      operationId: getAllOrders
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /api/orders/{userId}/{orderId}:
    get:
      summary: 根据用户ID和订单ID查询订单
      description: |
        根据用户ID和订单ID查询订单的详细信息，包括产品名称、甜度、冰量、数量、价格和创建时间等完整信息。
        
        **对应Tools**: order-get-order-by-user
      operationId: getOrderByUser
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
            format: int64
          example: 12345678901
        - name: orderId
          in: path
          required: true
          description: 订单ID
          schema:
            type: string
          example: "ORDER_20250101001"
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: 订单不存在

    delete:
      summary: 删除订单
      description: |
        根据用户ID和订单ID删除订单。只能删除属于该用户的订单。
        
        **对应Tools**: order-delete-order
      operationId: deleteOrder
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
            format: int64
          example: 12345678901
        - name: orderId
          in: path
          required: true
          description: 订单ID
          schema:
            type: string
          example: "ORDER_20250101001"
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "订单删除成功"
        '404':
          description: 订单不存在
        '400':
          description: 删除失败

  /api/orders/{orderId}:
    get:
      summary: 根据订单ID查询订单
      description: |
        根据订单ID查询订单的详细信息，包括产品名称、甜度、冰量、数量、价格和创建时间等完整信息。
        
        **对应Tools**: order-get-order
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: 订单ID
          schema:
            type: string
          example: "ORDER_20250101001"
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: 订单不存在

  /api/orders/user/{userId}:
    get:
      summary: 根据用户ID获取订单列表
      description: |
        根据用户ID获取该用户的所有订单列表，包括订单ID、产品信息、价格和创建时间。
        用于查看用户的订单历史。
        
        **对应Tools**: order-get-orders-by-user
      operationId: getOrdersByUserId
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
            format: int64
          example: 12345678901
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'

  /api/orders/query:
    post:
      summary: 多维度查询用户订单
      description: |
        根据多个条件查询用户订单，支持按产品名称、甜度、冰量、时间范围等条件筛选。
        
        **对应Tools**: order-query-orders
      operationId: queryOrders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderQueryRequest'
            example:
              userId: 12345678901
              productName: "云边茉莉"
              sweetness: 5
              iceLevel: 5
              startTime: "2025-01-01 00:00:00"
              endTime: "2025-01-31 23:59:59"
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'

  /api/orders/{userId}/{orderId}/remark:
    put:
      summary: 更新订单备注
      description: |
        根据用户ID和订单ID更新订单备注。只能更新属于该用户的订单。
        
        **对应Tools**: order-update-remark
      operationId: updateOrderRemark
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
            format: int64
          example: 12345678901
        - name: orderId
          in: path
          required: true
          description: 订单ID
          schema:
            type: string
          example: "ORDER_20250101001"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                remark:
                  type: string
                  description: 备注信息
              required:
                - remark
            example:
              remark: "请尽快制作，谢谢！"
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: 订单不存在
        '400':
          description: 更新失败

  /api/orders/stock/{productName}:
    get:
      summary: 检查库存
      description: |
        检查指定产品的库存是否充足，确保在下单前能够满足用户的需求数量。
        返回库存状态和可用性信息。
        
        **对应Tools**: order-check-stock
      operationId: checkStock
      parameters:
        - name: productName
          in: path
          required: true
          description: 产品名称
          schema:
            type: string
          example: "云边茉莉"
        - name: quantity
          in: query
          required: true
          description: 需要检查的数量
          schema:
            type: integer
          example: 2
      responses:
        '200':
          description: 检查成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  productName:
                    type: string
                  quantity:
                    type: integer
                  available:
                    type: boolean
                example:
                  productName: "云边茉莉"
                  quantity: 2
                  available: true

  /api/orders/products/{productName}/validate:
    get:
      summary: 验证产品是否存在
      description: |
        验证指定产品是否存在且可用。
        
        **对应Tools**: order-validate-product
      operationId: validateProduct
      parameters:
        - name: productName
          in: path
          required: true
          description: 产品名称
          schema:
            type: string
          example: "云边茉莉"
      responses:
        '200':
          description: 验证成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  productName:
                    type: string
                  exists:
                    type: boolean
                example:
                  productName: "云边茉莉"
                  exists: true

components:
  schemas:
    OrderCreateRequest:
      type: object
      required:
        - userId
        - productName
        - sweetness
        - iceLevel
        - quantity
      properties:
        userId:
          type: integer
          format: int64
          description: 用户ID
          example: 12345678901
        productName:
          type: string
          description: 产品名称
          example: "云边茉莉"
        sweetness:
          type: integer
          description: 甜度：1-无糖，2-微糖，3-半糖，4-少糖，5-标准糖
          minimum: 1
          maximum: 5
          example: 5
        iceLevel:
          type: integer
          description: 冰量：1-热，2-温，3-去冰，4-少冰，5-正常冰
          minimum: 1
          maximum: 5
          example: 5
        quantity:
          type: integer
          description: 购买数量
          minimum: 1
          example: 1
        remark:
          type: string
          description: 订单备注
          example: "请尽快制作"

    OrderQueryRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          format: int64
          description: 用户ID
          example: 12345678901
        productName:
          type: string
          description: 产品名称，支持模糊匹配
          example: "云边茉莉"
        sweetness:
          type: integer
          description: 甜度：1-无糖，2-微糖，3-半糖，4-少糖，5-标准糖
          minimum: 1
          maximum: 5
          example: 5
        iceLevel:
          type: integer
          description: 冰量：1-热，2-温，3-去冰，4-少冰，5-正常冰
          minimum: 1
          maximum: 5
          example: 5
        startTime:
          type: string
          format: date-time
          description: 开始时间
          example: "2025-01-01T00:00:00"
        endTime:
          type: string
          format: date-time
          description: 结束时间
          example: "2025-01-31T23:59:59"

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 订单ID
        orderId:
          type: string
          description: 订单编号
          example: "ORDER_20250101001"
        userId:
          type: integer
          format: int64
          description: 用户ID
          example: 12345678901
        productId:
          type: integer
          format: int64
          description: 产品ID
        productName:
          type: string
          description: 产品名称
          example: "云边茉莉"
        sweetness:
          type: integer
          description: 甜度
          example: 5
        iceLevel:
          type: integer
          description: 冰量
          example: 5
        quantity:
          type: integer
          description: 数量
          example: 1
        unitPrice:
          type: number
          format: decimal
          description: 单价
          example: 18.00
        totalPrice:
          type: number
          format: decimal
          description: 总价
          example: 18.00
        remark:
          type: string
          description: 备注
          example: "请尽快制作"
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          description: 更新时间

    OrderResponse:
      type: object
      properties:
        orderId:
          type: string
          description: 订单编号
          example: "ORDER_20250101001"
        userId:
          type: integer
          format: int64
          description: 用户ID
          example: 12345678901
        productName:
          type: string
          description: 产品名称
          example: "云边茉莉"
        sweetnessText:
          type: string
          description: 甜度文本
          example: "标准糖"
        iceLevelText:
          type: string
          description: 冰量文本
          example: "正常冰"
        quantity:
          type: integer
          description: 数量
          example: 1
        totalPrice:
          type: number
          format: decimal
          description: 总价
          example: 18.00
        remark:
          type: string
          description: 备注
          example: "请尽快制作"
        createdAt:
          type: string
          format: date-time
          description: 创建时间